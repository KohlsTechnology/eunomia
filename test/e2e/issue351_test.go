//go:build e2e
// +build e2e

/*
Copyright 2020 Kohl's Department Stores, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package e2e

import (
	"testing"
	"time"

	gitopsv1alpha1 "github.com/KohlsTechnology/eunomia/pkg/apis/eunomia/v1alpha1"
	framework "github.com/operator-framework/operator-sdk/pkg/test"
	batchv1 "k8s.io/api/batch/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/wait"
)

// The issue this tests for is the unexpected deletion of resources when multiple jobs with the Resource handling mode set to "Apply"
func TestIssue351MultipleJobRun(t *testing.T) {
	ctx, err := NewContext(t)
	if err != nil {
		t.Fatal(err)
	}
	defer ctx.Cleanup()

	// Create initial CR to generate an initial job and create the initial k8s resources

	gitops := &gitopsv1alpha1.GitOpsConfig{
		TypeMeta: metav1.TypeMeta{
			Kind:       "GitOpsConfig",
			APIVersion: "eunomia.kohls.io/v1alpha1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      "gitops-issue351",
			Namespace: ctx.namespace,
		},
		Spec: gitopsv1alpha1.GitOpsConfigSpec{
			TemplateSource: gitopsv1alpha1.GitConfig{
				URI:        ctx.eunomiaURI,
				Ref:        ctx.eunomiaRef,
				ContextDir: "test/e2e/testdata/hello-a",
			},
			ParameterSource: gitopsv1alpha1.GitConfig{
				URI:        ctx.eunomiaURI,
				Ref:        ctx.eunomiaRef,
				ContextDir: "test/e2e/testdata/empty-yaml",
			},
			Triggers: []gitopsv1alpha1.GitOpsTrigger{
				{Type: "Change"},
			},
			TemplateProcessorImage: "quay.io/kohlstechnology/eunomia-base:dev",
			ResourceHandlingMode:   "Apply",
			ResourceDeletionMode:   "Delete",
			ServiceAccountRef:      "eunomia-operator",
		},
	}

	err = framework.Global.Client.Create(ctx, gitops, &framework.CleanupOptions{TestContext: ctx.TestCtx, Timeout: timeout, RetryInterval: retryInterval})
	if err != nil {
		t.Fatal(err)
	}

	// When the initial job is created, we will use it as a template to create two additional jobs at the same time
	err = WaitForJobCreation(ctx.namespace, "gitopsconfig-gitops-issue351-", framework.Global.KubeClient)
	if err != nil {
		t.Error(err)
	}

	gitopsJob, err := GetJob(ctx.namespace, "gitopsconfig-gitops-issue351-", framework.Global.KubeClient)

	firstJob := &batchv1.Job{
		TypeMeta: metav1.TypeMeta{
			Kind:       "GitOpsConfig",
			APIVersion: "eunomia.kohls.io/v1alpha1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      "first-job",
			Namespace: ctx.namespace,
		},
		Spec: gitopsJob.Spec,
	}
	// The deep copy of the job keeps the selector and selector label that has to be generated by k8s.
	// Trying to create a job with those set will fail.
	firstJob.Spec.Template.SetLabels(map[string]string{})
	firstJob.Spec.Selector.Reset()

	err = framework.Global.Client.Create(ctx, firstJob, &framework.CleanupOptions{TestContext: ctx.TestCtx, Timeout: timeout, RetryInterval: retryInterval})
	if err != nil {
		t.Error(err)
	}

	secondJob := &batchv1.Job{
		TypeMeta: metav1.TypeMeta{
			Kind:       "GitOpsConfig",
			APIVersion: "eunomia.kohls.io/v1alpha1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      "second-job",
			Namespace: ctx.namespace,
		},
		Spec: gitopsJob.Spec,
	}
	secondJob.Spec.Template.SetLabels(map[string]string{})
	secondJob.Spec.Selector.Reset()

	err = framework.Global.Client.Create(ctx, secondJob, &framework.CleanupOptions{TestContext: ctx.TestCtx, Timeout: timeout, RetryInterval: retryInterval})
	if err != nil {
		t.Error(err)
	}

	// Wait to make sure both of the jobs finish running
	err = wait.Poll(retryInterval, 60*time.Second, func() (done bool, err error) {
		jobOne, _ := GetJob(ctx.namespace, "first-job", framework.Global.KubeClient)
		jobTwo, _ := GetJob(ctx.namespace, "second-job", framework.Global.KubeClient)

		switch {
		case jobOne.Status.Succeeded == 1 && jobTwo.Status.Succeeded == 1:
			t.Logf("Both jobs are done")
			return true, nil
		default:
			t.Logf("Both jobs are not done")
			return false, nil
		}
	})
	if err != nil {
		t.Error(err)
	}

	deploymentList, err := framework.Global.KubeClient.AppsV1().Deployments(ctx.namespace).List(ctx, metav1.ListOptions{})
	if err != nil {
		t.Error(err)
	}
	if len(deploymentList.Items) != 1 {
		t.Errorf("There was only %d deployments when we were expecting 1", len(deploymentList.Items))
	}
	if deploymentList.Items[0].GetDeletionTimestamp() != nil {
		t.Errorf("The deployment has been marked for deletion")
	}
}
